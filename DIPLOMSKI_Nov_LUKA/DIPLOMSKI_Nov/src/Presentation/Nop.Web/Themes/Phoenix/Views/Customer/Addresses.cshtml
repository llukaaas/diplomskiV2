@model CustomerAddressListModel
@{
    Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-account-page");
    NopHtml.AppendPageCssClassParts("html-address-list-page");
}
@section left
{
    @await Component.InvokeAsync(typeof(CustomerNavigationViewComponent), new { selectedTabId = CustomerNavigationEnum.Addresses })
}
<div class="page account-page address-list-page">
    <div class="page-title section-head">
        <h1>@T("Account.MyAccount") - @T("Account.CustomerAddresses")</h1>
    </div>
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CustomerAddressesTop, additionalData = Model })
        <nop-antiforgery-token />
        @if (Model.Addresses.Count > 0)
        {
                <div class="address-list">
                    @for (var i = 0; i < Model.Addresses.Count; i++)
                    {
                        var address = Model.Addresses[i];
                        <div class="section address-item">
                            @*<div class="title">
                                <strong>@address.FirstName @address.LastName</strong>
                            </div>*@
                            <ul class="info">
                                <li class="name">
                                    @address.FirstName @address.LastName
                                </li>
                                <li class="email">
                                    <label>@T("Address.Fields.Email"):</label>
                                    @address.Email
                                </li>
                                @if (address.PhoneEnabled)
                                {
                                    <li class="phone">
                                        <label>@T("Address.Fields.PhoneNumber"):</label>
                                        @address.PhoneNumber
                                    </li>
                                }
                                @if (address.FaxEnabled)
                                {
                                    <li class="fax">
                                        <label>@T("Address.Fields.FaxNumber"):</label>
                                        @address.FaxNumber
                                    </li>
                                }
                                @if (address.CompanyEnabled && !string.IsNullOrEmpty(address.Company))
                                {
                                    <li class="company">@address.Company</li>
                                }
                            @foreach (var item in address.AddressFields)
                            {
                                <li class=@item.Key.ToString().ToLower()>@item.Value</li>
                            }
                                @if (!string.IsNullOrEmpty(address.FormattedCustomAddressAttributes))
                                {
                                    <li class="custom-attributes-view">
                                        @Html.Raw(address.FormattedCustomAddressAttributes)
                                    </li>
                                }
                            </ul>
                            <div class="buttons">
                                <button type="button" class="button-2 edit-address-button" onclick="location.href = '@(Url.RouteUrl("CustomerAddressEdit", new {addressId = address.Id}))'"><span class="pi-edit"></span> @T("Common.Edit")</button>

                                <button type="button" class="button-2 delete-address-button" onclick="deletecustomeraddress(@(address.Id))"><span class="pi-delete"></span></button>
                            </div>
                        </div>
                    }
                </div>
                <script asp-location="Footer">
                    function deletecustomeraddress(addressId)  {
                        Swal.fire({
                        title: '@T("Theme.Phoenix.MyAccount.Address.Delete.Confirmation")',
                        text: "@T("Theme.Phoenix.MyAccount.Address.Delete.Confirmation.Description")",
                        icon: 'warning',
                        showCancelButton: true,
                            customClass: {
                                confirmButton: 'primary-btn',
                                cancelButton: 'primary-btn',
                            },

                            confirmButtonColor: '#102c5a',
                            cancelButtonColor: '#102c5a',
                        confirmButtonText: "@Html.Raw(JavaScriptEncoder.Default.Encode(T("Common.Yes").Text))",
                    }).then((result) => {
                        if (result.isConfirmed) {

                            var postData = {
                                addressId: addressId
                            };
                            addAntiForgeryToken(postData);

                            $.ajax({
                                cache: false,
                                type: "POST",
                                url: "@Url.RouteUrl("CustomerAddressDelete")",
                                data: postData,
                                dataType: "json",
                                beforeSend: function () {
                                    swal.fire({
                                        title: '',
                                        allowEscapeKey: false,
                                        allowOutsideClick: false,
                                        onOpen: () => {
                                            swal.showLoading();
                                        }
                                    })
                                },
                                success: function (data, textStatus, jqXHR) {
                                    location.href = data.redirect;
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
                                    alert('Failed to delete');
                                }
                            });
                            }
                        })
                        return false;
                    }

                </script>
        }
        else
        {
            <div class="no-data">
                @T("Account.CustomerAddresses.NoAddresses")
            </div>
        }
        <div class="add-button">
            <button type="button" class="button-1 add-address-button primary-btn" onclick="location.href='@Url.RouteUrl("CustomerAddressAdd")'">@T("Common.AddNew")</button>
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CustomerAddressesBottom, additionalData = Model })
    </div>
</div>